#ifndef lst_H
#define lst_H
#include <memory>
#include <cstddef>
#include <algorithm>
template <class T>
class lst
{
public:
    typedef T* iterator;
    typedef const T* const_iterator;
    typedef T& reference;
    typedef const T& const_reference;
    typedef size_t size_type;
    typedef T value_type;

    lst()
    {
        create();
    }
    explicit lst(size_type n,const T& t=T())
    {
        create(n,t);
    }
    lst(const lst& v)
    {
        create(v.begin(),v.end());
    }
    lst& operator=(const lst&);
    ~lst()
    {
        uncreate();
    }

    void push_back(const T& t)
    {
        if(data==limit)
            grow();
        unchecked_append(t);
    }

    size_type size() const
    {
        return limit-data;
    }

    iterator begin()
    {
        return data;
    }

    const_iterator begin() const
    {
        return data;
    }

    iterator end()
    {
        return limit;
    }
    const_iterator end() const
    {
        return limit;
    }

private:
    iterator data;
    iterator limit;

    std::allocator<T> alloc;
    void create();
    void create(size_type,const T&);
    void create(const_iterator,const_iterator);
    void uncreate();
    void grow();
    void unchecked_append(const T&);
};
template <class T>
lst<T>& lst<T>::operator=(const lst& rhs)
{
    if(&rhs!=this)
    {
        uncreate();
        create(rhs.begin(),rhs.end());
    }
    return *this;
}

template <class T>
void lst<T>::create()
{
    data=limit=0;
}

template <class T>
void lst<T>::create(size_type n,const T& val)
{
    data=alloc.allocate(n);
    limit=data+n;
    std::uninitialized_fill(data,limit,val);
}

template <class T>
void lst<T>::create(const_iterator i,const_iterator j)
{
    data=alloc.allocate(j-i);
    limit=std::uninitialized_copy(i,j,data);
}

template <class T>
void lst<T>::uncreate()
{
    if(data)
    {
        iterator it=limit;
        while(it!=data)
            alloc.destroy(--it);
        alloc.deallocate(data,limit-data);
    }
    data=limit=0;
}

template <class T>
void lst<T>::grow()
{
    size_type new_size=limit-data+ptrdiff_t(1);
    iterator new_data=alloc.allocate(new_size);
    iterator ava=uninitialized_copy(data,limit,new_data);
    uncreate();
    data=new_data;
    limit=data+new_size;
}

template <class T>
void lst<T>::unchecked_append(const T& val)
{
    alloc.construct((--limit)++,val);
}
#endif // lst_H
